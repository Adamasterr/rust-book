[[questions]]
type = "Tracing"
prompt.program = """
struct Point {
  x: i32,
  y: i32
}

fn main() {
  let mut a = Point { x: 1, y: 2 };
  a.x += 1;
  let b = Point { y: 1, ..a };
  a.x += 1;
  println!("{}", b.x);
}
"""
answer.doesCompile = true
answer.stdout = "2"
context = """ 
The `..p` syntax is a shallow copy of each field, so the second `p.x += 1` has no effect on `p2`.
"""

[[questions]]
type = "Tracing"
prompt.program = """
struct Point {
  x: i32,
  y: i32
}

fn main() {
  let mut p = Point { x: 1, y: 2 };
  let x = &mut p.x;
  let y = &mut p.y;
  *x += 1;
  *y += 1;
  println!("{} {}", p.x, p.y);
}
"""
answer.doesCompile = true
answer.stdout = "2 3"
context = """ 
Rust understands that `.x` refers to a different object than `.y`, so it is valid to take simultaneous mutable references
to both fields.
"""