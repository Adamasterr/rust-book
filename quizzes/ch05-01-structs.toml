[[questions]]
type = "Tracing"
prompt.program = """
struct Point {
  x: i32,
  y: i32
}

fn main() {
  let mut a = Point { x: 1, y: 2 };
  a.x += 1;
  let b = Point { y: 1, ..a };
  a.x += 1;
  println!("{}", b.x);
}
"""
answer.doesCompile = true
answer.stdout = "2"
context = """ 
The `..p` syntax is a shallow copy of each field, so the second `p.x += 1` has no effect on `p2`.
"""

[[questions]]
type = "Tracing"
prompt.program = """
struct Point {
  x: i32,
  y: i32
}

fn get_x(p: &mut Point) -> &mut i32 {
  &mut p.x
}

fn main() {
  let mut p = Point { x: 1, y: 2 };
  let x = get_x(&mut p);
  *x += 1;
  println!("{} {}", *x, p.y);
}
"""
answer.doesCompile = false
answer.lineNumber = 14
context = """ 
Because `get_x` mutably borrows `p`, a program cannot use `p` in any way until `x` is no longer used. 
Therefore reading `x` and `p.y` in the same line is an ownership error.
"""