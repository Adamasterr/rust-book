[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Consider these two implementations of a function to decrement an unsigned number twice.

```
fn decr_twice_v1(n: u32) -> Option<u32> {
  match n {
    0 => None,
    1 => None,
    n2 => Some(n2 - 2)
  }
}

fn decr_twice_v2(n: u32) -> Option<u32> {
  if n == 0 {
    None
  } else if n == 1 {
    None
  } else {
    Some(n - 2)
  }
}
```

The functions have the same behavior for:
"""
prompt.choices = [
  "All inputs",
  "No inputs",
  "Some, but not all inputs"
]
answer.answer = 0
context = """
The `match` and `if` perform the same function here. A match is like a specialized `if` that checks for equality of the matched object.
"""

[[questions]]
type = "Tracing"
prompt.program = """
#[derive(Debug)]
enum Either {
  Left(usize),
  Right(String)
}

fn main() {
  let x = Either::Left(1);
  let value = match x {
    Either::Left(n) => n,
    Either::Right(_) => 0
  };
  println!("{x} {value}");
}
"""
answer.doesCompile = false
answer.lineNumber = 13
context = """
A match moves its input, so `x` cannot be used in the `println`.
"""