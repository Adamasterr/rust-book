[[questions]]
id = "94425a4e-043e-47f8-9fba-c5b09fb60aa3"
type = "Tracing"
prompt.program = """
fn add_suffix(mut s: String) {
  s.push_str(" world");
}

fn main() {
  let s = String::from("hello");
  add_suffix(s);
  println!("{s}");
}
"""
answer.doesCompile = false
answer.lineNumber = 8
context = """
The string `s` is moved into `add_suffix` after calling it, so it cannot be used on line 8.
"""

[[questions]]
id = "c66f045e-8e45-4c24-bc7e-58ca45d7974e"
type = "ShortAnswer"
prompt.prompt = """
What is the maximum number of times a heap allocation could occur in the following program? (Write your answer using digits, like `1` or `2` etc.)

```
fn print(s: String) {
  println!("{s}");
}

fn main() {
  let s = String::from("Hello");
  print(s.clone());
  print(s);
}
```
"""
answer.answer = "2"
context = """
First, the call to `String::from` causes an initial heap allocation. Then the call `s.clone()` does a deep copy that involves a second heap allocation. 
Moving (or shallow-copying) a `String` does not cause a heap allocation.
"""

[[questions]]
id = "c00e3638-861b-4f9e-a55c-bfb67af79280"
type = "Tracing"
prompt.program = """
fn main() {
  let s = String::from("hello");
  let s2;
  let b = false;
  if b {
    s2 = s;
  }
  println!("{s}");
}
"""
answer.doesCompile = false
answer.lineNumber = 8
context = """
Because `s` could be moved inside of the if-statement, it is illegal to use it on line 8.
"""